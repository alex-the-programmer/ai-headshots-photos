import gql from 'graphql-tag';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601DateTime: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

/** Autogenerated input type of AddProjectStyle */
export type AddProjectStyleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  projectId: Scalars['ID']['input'];
  propertyValueIds: Array<Scalars['ID']['input']>;
  styleId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddProjectStyle. */
export type AddProjectStylePayload = {
  __typename?: 'AddProjectStylePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

/** Autogenerated input type of ChoosePackage */
export type ChoosePackageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  packageId?: InputMaybe<Scalars['ID']['input']>;
  projectId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of ChoosePackage. */
export type ChoosePackagePayload = {
  __typename?: 'ChoosePackagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateProject. */
export type CreateProjectPayload = {
  __typename?: 'CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

/** Autogenerated input type of CreateStripeSession */
export type CreateStripeSessionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  orderId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateStripeSession. */
export type CreateStripeSessionPayload = {
  __typename?: 'CreateStripeSessionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  stripeSessionUrl: Scalars['String']['output'];
};

/** Autogenerated input type of DeleteProjectStyle */
export type DeleteProjectStyleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  projectStyleId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteProjectStyle. */
export type DeleteProjectStylePayload = {
  __typename?: 'DeleteProjectStylePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

export enum ExternalAccountTypeEnum {
  Apple = 'APPLE',
  Google = 'GOOGLE'
}

export type GeneratedImage = {
  __typename?: 'GeneratedImage';
  id: Scalars['ID']['output'];
  likenessScore: Scalars['Float']['output'];
  originalUrl: Scalars['String']['output'];
  prompt: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
};

/** The connection type for GeneratedImage. */
export type GeneratedImageConnection = {
  __typename?: 'GeneratedImageConnection';
  /** A list of edges. */
  edges: Array<GeneratedImageEdge>;
  /** A list of nodes. */
  nodes: Array<GeneratedImage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type GeneratedImageEdge = {
  __typename?: 'GeneratedImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: GeneratedImage;
};

export enum ImageProcessingStatusEnum {
  MultipleFacesDetected = 'MULTIPLE_FACES_DETECTED',
  NoFacesDetected = 'NO_FACES_DETECTED',
  Processed = 'PROCESSED',
  Processing = 'PROCESSING',
  Thumbnail = 'THUMBNAIL'
}

export type InputImage = {
  __typename?: 'InputImage';
  id: Scalars['ID']['output'];
  processingStatus: ImageProcessingStatusEnum;
  url: Scalars['String']['output'];
};

/** The connection type for InputImage. */
export type InputImageConnection = {
  __typename?: 'InputImageConnection';
  /** A list of edges. */
  edges: Array<InputImageEdge>;
  /** A list of nodes. */
  nodes: Array<InputImage>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type InputImageEdge = {
  __typename?: 'InputImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: InputImage;
};

export type Mutation = {
  __typename?: 'Mutation';
  addProjectStyle?: Maybe<AddProjectStylePayload>;
  choosePackage?: Maybe<ChoosePackagePayload>;
  createProject?: Maybe<CreateProjectPayload>;
  createStripeSession?: Maybe<CreateStripeSessionPayload>;
  deleteProjectStyle?: Maybe<DeleteProjectStylePayload>;
  registerUser?: Maybe<RegisterUserPayload>;
  removeProjectImage?: Maybe<RemoveProjectImagePayload>;
  requestInputImagesProcessing?: Maybe<RequestInputImagesProcessingPayload>;
  sendSignInEmail?: Maybe<SendSignInEmailPayload>;
  signInWithExternalAccount?: Maybe<SignInWithExternalAccountPayload>;
  updateProjectPropertyValue?: Maybe<UpdateProjectPropertyValuePayload>;
  uploadProjectImage?: Maybe<UploadProjectImagePayload>;
  verifyStripeSession?: Maybe<VerifyStripeSessionPayload>;
};


export type MutationAddProjectStyleArgs = {
  input: AddProjectStyleInput;
};


export type MutationChoosePackageArgs = {
  input: ChoosePackageInput;
};


export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};


export type MutationCreateStripeSessionArgs = {
  input: CreateStripeSessionInput;
};


export type MutationDeleteProjectStyleArgs = {
  input: DeleteProjectStyleInput;
};


export type MutationRegisterUserArgs = {
  input: RegisterUserInput;
};


export type MutationRemoveProjectImageArgs = {
  input: RemoveProjectImageInput;
};


export type MutationRequestInputImagesProcessingArgs = {
  input: RequestInputImagesProcessingInput;
};


export type MutationSendSignInEmailArgs = {
  input: SendSignInEmailInput;
};


export type MutationSignInWithExternalAccountArgs = {
  input: SignInWithExternalAccountInput;
};


export type MutationUpdateProjectPropertyValueArgs = {
  input: UpdateProjectPropertyValueInput;
};


export type MutationUploadProjectImageArgs = {
  input: UploadProjectImageInput;
};


export type MutationVerifyStripeSessionArgs = {
  input: VerifyStripeSessionInput;
};

export type Order = {
  __typename?: 'Order';
  id: Scalars['ID']['output'];
  package?: Maybe<Package>;
  processingStatus: OrderProcessingStatusEnum;
  projectStyles: ProjectStyleConnection;
  subtotal: Scalars['Float']['output'];
};


export type OrderProjectStylesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Order. */
export type OrderConnection = {
  __typename?: 'OrderConnection';
  /** A list of edges. */
  edges: Array<OrderEdge>;
  /** A list of nodes. */
  nodes: Array<Order>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrderEdge = {
  __typename?: 'OrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Order;
};

export enum OrderProcessingStatusEnum {
  Created = 'CREATED',
  ImagesGenerated = 'IMAGES_GENERATED',
  /** After this status no more cahnges to the order could be made. */
  ImageGenerationStarted = 'IMAGE_GENERATION_STARTED',
  PaymentProcessed = 'PAYMENT_PROCESSED',
  PaymentProcessingError = 'PAYMENT_PROCESSING_ERROR'
}

export type Package = {
  __typename?: 'Package';
  appleProductId: Scalars['String']['output'];
  badge?: Maybe<Scalars['String']['output']>;
  badgeColor?: Maybe<PackageBadgeColorEnum>;
  headshotsCount: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  preselected: Scalars['Boolean']['output'];
  price: Scalars['Float']['output'];
  stylesCount: Scalars['Int']['output'];
};

export enum PackageBadgeColorEnum {
  Blue = 'BLUE',
  Green = 'GREEN'
}

/** The connection type for Package. */
export type PackageConnection = {
  __typename?: 'PackageConnection';
  /** A list of edges. */
  edges: Array<PackageEdge>;
  /** A list of nodes. */
  nodes: Array<Package>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PackageEdge = {
  __typename?: 'PackageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Package;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Project = {
  __typename?: 'Project';
  allImagesGenerated: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  genderPropertyValue?: Maybe<PropertyValue>;
  hasImageProcessingErrors: Scalars['Boolean']['output'];
  hasInvalidImages: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  inputImages: InputImageConnection;
  lastOrder?: Maybe<Order>;
  orders: OrderConnection;
  processingStatus: ProjectProcessingStatusEnum;
  projectPhotoUrl?: Maybe<Scalars['String']['output']>;
  projectStyles: ProjectStyleConnection;
  status: Scalars['String']['output'];
  styles: StyleConnection;
};


export type ProjectInputImagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ProjectOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ProjectProjectStylesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ProjectStylesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Project. */
export type ProjectConnection = {
  __typename?: 'ProjectConnection';
  /** A list of edges. */
  edges: Array<ProjectEdge>;
  /** A list of nodes. */
  nodes: Array<Project>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Project;
};

export enum ProjectProcessingStatusEnum {
  AllImagesGenerated = 'ALL_IMAGES_GENERATED',
  Created = 'CREATED',
  HasImageProcessingErrors = 'HAS_IMAGE_PROCESSING_ERRORS',
  HasInvalidImages = 'HAS_INVALID_IMAGES',
  InputImagesProcessingStarted = 'INPUT_IMAGES_PROCESSING_STARTED',
  Processing = 'PROCESSING'
}

export type ProjectStyle = {
  __typename?: 'ProjectStyle';
  generatedImages: GeneratedImageConnection;
  id: Scalars['ID']['output'];
  nameWithProperties: Scalars['String']['output'];
  numberOfPhotos: Scalars['Int']['output'];
  order: Order;
  price: Scalars['Float']['output'];
  projectStyleProperties: ProjectStylePropertyConnection;
  style: Style;
};


export type ProjectStyleGeneratedImagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ProjectStyleProjectStylePropertiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for ProjectStyle. */
export type ProjectStyleConnection = {
  __typename?: 'ProjectStyleConnection';
  /** A list of edges. */
  edges: Array<ProjectStyleEdge>;
  /** A list of nodes. */
  nodes: Array<ProjectStyle>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ProjectStyleEdge = {
  __typename?: 'ProjectStyleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ProjectStyle;
};

export type ProjectStyleProperty = {
  __typename?: 'ProjectStyleProperty';
  id: Scalars['ID']['output'];
  property: Property;
  propertyValue: PropertyValue;
};

/** The connection type for ProjectStyleProperty. */
export type ProjectStylePropertyConnection = {
  __typename?: 'ProjectStylePropertyConnection';
  /** A list of edges. */
  edges: Array<ProjectStylePropertyEdge>;
  /** A list of nodes. */
  nodes: Array<ProjectStyleProperty>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ProjectStylePropertyEdge = {
  __typename?: 'ProjectStylePropertyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ProjectStyleProperty;
};

export type Property = {
  __typename?: 'Property';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  propertyValues: PropertyValueConnection;
};


export type PropertyPropertyValuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Property. */
export type PropertyConnection = {
  __typename?: 'PropertyConnection';
  /** A list of edges. */
  edges: Array<PropertyEdge>;
  /** A list of nodes. */
  nodes: Array<Property>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PropertyEdge = {
  __typename?: 'PropertyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Property;
};

export enum PropertyTypeEnum {
  ForProject = 'FOR_PROJECT',
  ForStyle = 'FOR_STYLE',
  ForStyleDefault = 'FOR_STYLE_DEFAULT'
}

export type PropertyValue = {
  __typename?: 'PropertyValue';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** The connection type for PropertyValue. */
export type PropertyValueConnection = {
  __typename?: 'PropertyValueConnection';
  /** A list of edges. */
  edges: Array<PropertyValueEdge>;
  /** A list of nodes. */
  nodes: Array<PropertyValue>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PropertyValueEdge = {
  __typename?: 'PropertyValueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: PropertyValue;
};

export type Query = {
  __typename?: 'Query';
  availablePackages: PackageConnection;
  availableProperties: PropertyConnection;
  availableStyles: StyleConnection;
  currentUser?: Maybe<User>;
};


export type QueryAvailablePackagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryAvailablePropertiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  propertyType: PropertyTypeEnum;
};


export type QueryAvailableStylesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of RegisterUser */
export type RegisterUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
};

/** Autogenerated return type of RegisterUser. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  latestProject?: Maybe<Project>;
  userAuthentication?: Maybe<UserAuthentication>;
  validationErrors?: Maybe<Array<ValidationError>>;
};

/** Autogenerated input type of RemoveProjectImage */
export type RemoveProjectImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  imageId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveProjectImage. */
export type RemoveProjectImagePayload = {
  __typename?: 'RemoveProjectImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

/** Autogenerated input type of RequestInputImagesProcessing */
export type RequestInputImagesProcessingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  projectId: Scalars['ID']['input'];
};

/** Autogenerated return type of RequestInputImagesProcessing. */
export type RequestInputImagesProcessingPayload = {
  __typename?: 'RequestInputImagesProcessingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

/** Autogenerated input type of SendSignInEmail */
export type SendSignInEmailInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
};

/** Autogenerated return type of SendSignInEmail. */
export type SendSignInEmailPayload = {
  __typename?: 'SendSignInEmailPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  processed: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SignInWithExternalAccount */
export type SignInWithExternalAccountInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  externalAccountId: Scalars['String']['input'];
  externalAccountType: ExternalAccountTypeEnum;
};

/** Autogenerated return type of SignInWithExternalAccount. */
export type SignInWithExternalAccountPayload = {
  __typename?: 'SignInWithExternalAccountPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  userAuthentication?: Maybe<UserAuthentication>;
};

export type Style = {
  __typename?: 'Style';
  id: Scalars['ID']['output'];
  logo: Scalars['String']['output'];
  name: Scalars['String']['output'];
};

/** The connection type for Style. */
export type StyleConnection = {
  __typename?: 'StyleConnection';
  /** A list of edges. */
  edges: Array<StyleEdge>;
  /** A list of nodes. */
  nodes: Array<Style>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type StyleEdge = {
  __typename?: 'StyleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Style;
};

/** Autogenerated input type of UpdateProjectPropertyValue */
export type UpdateProjectPropertyValueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  projectId: Scalars['ID']['input'];
  propertyValueId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateProjectPropertyValue. */
export type UpdateProjectPropertyValuePayload = {
  __typename?: 'UpdateProjectPropertyValuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

/** Autogenerated input type of UploadProjectImage */
export type UploadProjectImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['Upload']['input'];
  projectId: Scalars['ID']['input'];
  triggerProcessing: Scalars['Boolean']['input'];
};

/** Autogenerated return type of UploadProjectImage. */
export type UploadProjectImagePayload = {
  __typename?: 'UploadProjectImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  project: Project;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  project: Project;
  projects: ProjectConnection;
};


export type UserProjectArgs = {
  projectId: Scalars['ID']['input'];
};


export type UserProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type UserAuthentication = {
  __typename?: 'UserAuthentication';
  email: Scalars['String']['output'];
  jwtToken: Scalars['String']['output'];
};

export type ValidationError = {
  __typename?: 'ValidationError';
  fieldName: Scalars['String']['output'];
  message: Scalars['String']['output'];
  type: Scalars['String']['output'];
};

/** Autogenerated input type of VerifyStripeSession */
export type VerifyStripeSessionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  orderId: Scalars['ID']['input'];
};

/** Autogenerated return type of VerifyStripeSession. */
export type VerifyStripeSessionPayload = {
  __typename?: 'VerifyStripeSessionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  order: Order;
};

export type DashboardStylesQueryVariables = Exact<{
  projectId: Scalars['ID']['input'];
}>;


export type DashboardStylesQuery = { __typename?: 'Query', currentUser?: { __typename?: 'User', id: string, project: { __typename?: 'Project', id: string, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, nameWithProperties: string, generatedImages: { __typename?: 'GeneratedImageConnection', nodes: Array<{ __typename?: 'GeneratedImage', id: string, thumbnailUrl: string, originalUrl: string }> } }> } } } | null };

export type GenderSelectorQueryVariables = Exact<{ [key: string]: never; }>;


export type GenderSelectorQuery = { __typename?: 'Query', availableProperties: { __typename?: 'PropertyConnection', nodes: Array<{ __typename?: 'Property', id: string, name: string, propertyValues: { __typename?: 'PropertyValueConnection', nodes: Array<{ __typename?: 'PropertyValue', id: string, name: string }> } }> } };

export type UpdateProjectPropertyValueMutationVariables = Exact<{
  projectId: Scalars['ID']['input'];
  propertyValueId: Scalars['ID']['input'];
}>;


export type UpdateProjectPropertyValueMutation = { __typename?: 'Mutation', updateProjectPropertyValue?: { __typename?: 'UpdateProjectPropertyValuePayload', project: { __typename?: 'Project', id: string, genderPropertyValue?: { __typename?: 'PropertyValue', id: string } | null } } | null };

export type ImagesUploadPageQueryVariables = Exact<{
  correctionMode: Scalars['Boolean']['input'];
  projectId: Scalars['ID']['input'];
}>;


export type ImagesUploadPageQuery = { __typename?: 'Query', currentUser?: { __typename?: 'User', id: string, project: { __typename?: 'Project', id: string, hasInvalidImages?: boolean, hasImageProcessingErrors?: boolean, styles: { __typename?: 'StyleConnection', nodes: Array<{ __typename?: 'Style', id: string }> }, inputImages: { __typename?: 'InputImageConnection', nodes: Array<{ __typename?: 'InputImage', id: string, url: string, processingStatus: ImageProcessingStatusEnum }> } } } | null };

export type ProjectUploadImagePageFragment = { __typename?: 'Project', id: string, inputImages: { __typename?: 'InputImageConnection', nodes: Array<{ __typename?: 'InputImage', id: string, url: string, processingStatus: ImageProcessingStatusEnum }> } };

export type InputImageUploadImagePageFragment = { __typename?: 'InputImage', id: string, url: string, processingStatus: ImageProcessingStatusEnum };

export type PackageSelectionPageQueryVariables = Exact<{ [key: string]: never; }>;


export type PackageSelectionPageQuery = { __typename?: 'Query', availablePackages: { __typename?: 'PackageConnection', nodes: Array<{ __typename?: 'Package', id: string, name: string, price: number, headshotsCount: number, stylesCount: number, badge?: string | null, badgeColor?: PackageBadgeColorEnum | null, preselected: boolean, appleProductId: string }> } };

export type ProjectsListQueryVariables = Exact<{ [key: string]: never; }>;


export type ProjectsListQuery = { __typename?: 'Query', currentUser?: { __typename?: 'User', id: string, projects: { __typename?: 'ProjectConnection', nodes: Array<{ __typename?: 'Project', id: string, processingStatus: ProjectProcessingStatusEnum, projectPhotoUrl?: string | null, createdAt: any, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, nameWithProperties: string }> }, orders: { __typename?: 'OrderConnection', nodes: Array<{ __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum }> } }> } } | null };

export type StylesSelectionPageQueryVariables = Exact<{
  projectId: Scalars['ID']['input'];
}>;


export type StylesSelectionPageQuery = { __typename?: 'Query', availableStyles: { __typename?: 'StyleConnection', nodes: Array<{ __typename?: 'Style', id: string, name: string, logo: string }> }, availableProperties: { __typename?: 'PropertyConnection', nodes: Array<{ __typename?: 'Property', id: string, name: string, propertyValues: { __typename?: 'PropertyValueConnection', nodes: Array<{ __typename?: 'PropertyValue', id: string, name: string }> } }> }, currentUser?: { __typename?: 'User', id: string, project: { __typename?: 'Project', id: string, processingStatus: ProjectProcessingStatusEnum, orders: { __typename?: 'OrderConnection', nodes: Array<{ __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum, subtotal: number, package?: { __typename?: 'Package', id: string, name: string, stylesCount: number } | null, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, numberOfPhotos: number, price: number, style: { __typename?: 'Style', id: string, name: string, logo: string }, projectStyleProperties: { __typename?: 'ProjectStylePropertyConnection', nodes: Array<{ __typename?: 'ProjectStyleProperty', id: string, property: { __typename?: 'Property', id: string, name: string }, propertyValue: { __typename?: 'PropertyValue', id: string, name: string } }> } }> } }> } } } | null };

export type WelcomePageCheckSessionQueryVariables = Exact<{ [key: string]: never; }>;


export type WelcomePageCheckSessionQuery = { __typename?: 'Query', currentUser?: { __typename?: 'User', id: string, projects: { __typename?: 'ProjectConnection', nodes: Array<{ __typename?: 'Project', id: string }> } } | null };

export type ImageCardFragment = { __typename?: 'GeneratedImage', id: string, thumbnailUrl: string, originalUrl: string };

export type DashboardStylesFragment = { __typename?: 'ProjectStyle', id: string, nameWithProperties: string, generatedImages: { __typename?: 'GeneratedImageConnection', nodes: Array<{ __typename?: 'GeneratedImage', id: string, thumbnailUrl: string, originalUrl: string }> } };

export type UploadImageMutationVariables = Exact<{
  projectId: Scalars['ID']['input'];
  image: Scalars['Upload']['input'];
  triggerProcessing: Scalars['Boolean']['input'];
}>;


export type UploadImageMutation = { __typename?: 'Mutation', uploadProjectImage?: { __typename?: 'UploadProjectImagePayload', project: { __typename?: 'Project', id: string, inputImages: { __typename?: 'InputImageConnection', nodes: Array<{ __typename?: 'InputImage', id: string, url: string, processingStatus: ImageProcessingStatusEnum }> } } } | null };

export type RemoveImageMutationVariables = Exact<{
  imageId: Scalars['ID']['input'];
}>;


export type RemoveImageMutation = { __typename?: 'Mutation', removeProjectImage?: { __typename?: 'RemoveProjectImagePayload', project: { __typename?: 'Project', id: string, inputImages: { __typename?: 'InputImageConnection', nodes: Array<{ __typename?: 'InputImage', id: string, url: string, processingStatus: ImageProcessingStatusEnum }> } } } | null };

export type CheckPurchaseStatusQueryVariables = Exact<{
  projectId: Scalars['ID']['input'];
}>;


export type CheckPurchaseStatusQuery = { __typename?: 'Query', currentUser?: { __typename?: 'User', id: string, project: { __typename?: 'Project', id: string, lastOrder?: { __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum } | null } } | null };

export type ChoosePackageMutationVariables = Exact<{
  projectId: Scalars['ID']['input'];
  packageId: Scalars['ID']['input'];
}>;


export type ChoosePackageMutation = { __typename?: 'Mutation', choosePackage?: { __typename?: 'ChoosePackagePayload', project: { __typename?: 'Project', id: string, lastOrder?: { __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum, package?: { __typename?: 'Package', id: string } | null } | null } } | null };

export type PackageCardFragment = { __typename?: 'Package', id: string, name: string, price: number, headshotsCount: number, stylesCount: number, badge?: string | null, badgeColor?: PackageBadgeColorEnum | null, preselected: boolean, appleProductId: string };

export type ProjectCardFragment = { __typename?: 'Project', id: string, processingStatus: ProjectProcessingStatusEnum, projectPhotoUrl?: string | null, createdAt: any, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, nameWithProperties: string }> }, orders: { __typename?: 'OrderConnection', nodes: Array<{ __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum }> } };

export type CartProjectStyleFragment = { __typename?: 'ProjectStyle', id: string, numberOfPhotos: number, price: number, style: { __typename?: 'Style', id: string, name: string, logo: string }, projectStyleProperties: { __typename?: 'ProjectStylePropertyConnection', nodes: Array<{ __typename?: 'ProjectStyleProperty', id: string, property: { __typename?: 'Property', id: string, name: string }, propertyValue: { __typename?: 'PropertyValue', id: string, name: string } }> } };

export type CartFragment = { __typename?: 'Project', id: string, processingStatus: ProjectProcessingStatusEnum, orders: { __typename?: 'OrderConnection', nodes: Array<{ __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum, subtotal: number, package?: { __typename?: 'Package', id: string, name: string, stylesCount: number } | null, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, numberOfPhotos: number, price: number, style: { __typename?: 'Style', id: string, name: string, logo: string }, projectStyleProperties: { __typename?: 'ProjectStylePropertyConnection', nodes: Array<{ __typename?: 'ProjectStyleProperty', id: string, property: { __typename?: 'Property', id: string, name: string }, propertyValue: { __typename?: 'PropertyValue', id: string, name: string } }> } }> } }> } };

export type StyleStyleSelectionCardFragment = { __typename?: 'Style', id: string, name: string, logo: string };

export type DeleteProjectStyleMutationVariables = Exact<{
  projectStyleId: Scalars['ID']['input'];
}>;


export type DeleteProjectStyleMutation = { __typename?: 'Mutation', deleteProjectStyle?: { __typename?: 'DeleteProjectStylePayload', project: { __typename?: 'Project', id: string, processingStatus: ProjectProcessingStatusEnum, orders: { __typename?: 'OrderConnection', nodes: Array<{ __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum, subtotal: number, package?: { __typename?: 'Package', id: string, name: string, stylesCount: number } | null, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, numberOfPhotos: number, price: number, style: { __typename?: 'Style', id: string, name: string, logo: string }, projectStyleProperties: { __typename?: 'ProjectStylePropertyConnection', nodes: Array<{ __typename?: 'ProjectStyleProperty', id: string, property: { __typename?: 'Property', id: string, name: string }, propertyValue: { __typename?: 'PropertyValue', id: string, name: string } }> } }> } }> } } } | null };

export type PropertyStyleSelectionCardFragment = { __typename?: 'Property', id: string, name: string, propertyValues: { __typename?: 'PropertyValueConnection', nodes: Array<{ __typename?: 'PropertyValue', id: string, name: string }> } };

export type AddProjectStyleMutationVariables = Exact<{
  projectId: Scalars['ID']['input'];
  styleId: Scalars['ID']['input'];
  propertyValueIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type AddProjectStyleMutation = { __typename?: 'Mutation', addProjectStyle?: { __typename?: 'AddProjectStylePayload', project: { __typename?: 'Project', id: string, processingStatus: ProjectProcessingStatusEnum, orders: { __typename?: 'OrderConnection', nodes: Array<{ __typename?: 'Order', id: string, processingStatus: OrderProcessingStatusEnum, subtotal: number, package?: { __typename?: 'Package', id: string, name: string, stylesCount: number } | null, projectStyles: { __typename?: 'ProjectStyleConnection', nodes: Array<{ __typename?: 'ProjectStyle', id: string, numberOfPhotos: number, price: number, style: { __typename?: 'Style', id: string, name: string, logo: string }, projectStyleProperties: { __typename?: 'ProjectStylePropertyConnection', nodes: Array<{ __typename?: 'ProjectStyleProperty', id: string, property: { __typename?: 'Property', id: string, name: string }, propertyValue: { __typename?: 'PropertyValue', id: string, name: string } }> } }> } }> } } } | null };

export type WelcomeScreenSignInWithExternalAccountMutationVariables = Exact<{
  input: SignInWithExternalAccountInput;
}>;


export type WelcomeScreenSignInWithExternalAccountMutation = { __typename?: 'Mutation', signInWithExternalAccount?: { __typename?: 'SignInWithExternalAccountPayload', clientMutationId?: string | null, userAuthentication?: { __typename?: 'UserAuthentication', jwtToken: string } | null } | null };

export type CreateProjectMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateProjectMutation = { __typename?: 'Mutation', createProject?: { __typename?: 'CreateProjectPayload', project: { __typename?: 'Project', id: string } } | null };

export const InputImageUploadImagePageFragmentDoc = gql`
    fragment inputImageUploadImagePage on InputImage {
  id
  url
  processingStatus
}
    `;
export const ProjectUploadImagePageFragmentDoc = gql`
    fragment projectUploadImagePage on Project {
  id
  inputImages {
    nodes {
      ...inputImageUploadImagePage
    }
  }
}
    ${InputImageUploadImagePageFragmentDoc}`;
export const ImageCardFragmentDoc = gql`
    fragment ImageCard on GeneratedImage {
  id
  thumbnailUrl
  originalUrl
}
    `;
export const DashboardStylesFragmentDoc = gql`
    fragment dashboardStyles on ProjectStyle {
  id
  nameWithProperties
  generatedImages {
    nodes {
      ...ImageCard
    }
  }
}
    ${ImageCardFragmentDoc}`;
export const PackageCardFragmentDoc = gql`
    fragment PackageCard on Package {
  id
  name
  price
  headshotsCount
  stylesCount
  badge
  badgeColor
  preselected
  appleProductId
}
    `;
export const ProjectCardFragmentDoc = gql`
    fragment projectCard on Project {
  id
  processingStatus
  projectPhotoUrl
  createdAt
  projectStyles {
    nodes {
      id
      nameWithProperties
    }
  }
  orders {
    nodes {
      id
      processingStatus
    }
  }
}
    `;
export const StyleStyleSelectionCardFragmentDoc = gql`
    fragment styleStyleSelectionCard on Style {
  id
  name
  logo
}
    `;
export const CartProjectStyleFragmentDoc = gql`
    fragment cartProjectStyle on ProjectStyle {
  id
  style {
    ...styleStyleSelectionCard
  }
  projectStyleProperties {
    nodes {
      id
      property {
        id
        name
      }
      propertyValue {
        id
        name
      }
    }
  }
  numberOfPhotos
  price
}
    ${StyleStyleSelectionCardFragmentDoc}`;
export const CartFragmentDoc = gql`
    fragment cart on Project {
  id
  processingStatus
  orders {
    nodes {
      id
      processingStatus
      subtotal
      package {
        id
        name
        stylesCount
      }
      projectStyles {
        nodes {
          ...cartProjectStyle
        }
      }
    }
  }
}
    ${CartProjectStyleFragmentDoc}`;
export const PropertyStyleSelectionCardFragmentDoc = gql`
    fragment propertyStyleSelectionCard on Property {
  id
  name
  propertyValues {
    nodes {
      id
      name
    }
  }
}
    `;
export const DashboardStylesDocument = gql`
    query DashboardStyles($projectId: ID!) {
  currentUser {
    id
    project(projectId: $projectId) {
      id
      projectStyles {
        nodes {
          ...dashboardStyles
        }
      }
    }
  }
}
    ${DashboardStylesFragmentDoc}`;

/**
 * __useDashboardStylesQuery__
 *
 * To run a query within a React component, call `useDashboardStylesQuery` and pass it any options that fit your needs.
 * When your component renders, `useDashboardStylesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDashboardStylesQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useDashboardStylesQuery(baseOptions: Apollo.QueryHookOptions<DashboardStylesQuery, DashboardStylesQueryVariables> & ({ variables: DashboardStylesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DashboardStylesQuery, DashboardStylesQueryVariables>(DashboardStylesDocument, options);
      }
export function useDashboardStylesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DashboardStylesQuery, DashboardStylesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DashboardStylesQuery, DashboardStylesQueryVariables>(DashboardStylesDocument, options);
        }
export function useDashboardStylesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<DashboardStylesQuery, DashboardStylesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<DashboardStylesQuery, DashboardStylesQueryVariables>(DashboardStylesDocument, options);
        }
export type DashboardStylesQueryHookResult = ReturnType<typeof useDashboardStylesQuery>;
export type DashboardStylesLazyQueryHookResult = ReturnType<typeof useDashboardStylesLazyQuery>;
export type DashboardStylesSuspenseQueryHookResult = ReturnType<typeof useDashboardStylesSuspenseQuery>;
export type DashboardStylesQueryResult = Apollo.QueryResult<DashboardStylesQuery, DashboardStylesQueryVariables>;
export const GenderSelectorDocument = gql`
    query GenderSelector {
  availableProperties(propertyType: FOR_PROJECT) {
    nodes {
      id
      name
      propertyValues {
        nodes {
          id
          name
        }
      }
    }
  }
}
    `;

/**
 * __useGenderSelectorQuery__
 *
 * To run a query within a React component, call `useGenderSelectorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGenderSelectorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGenderSelectorQuery({
 *   variables: {
 *   },
 * });
 */
export function useGenderSelectorQuery(baseOptions?: Apollo.QueryHookOptions<GenderSelectorQuery, GenderSelectorQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GenderSelectorQuery, GenderSelectorQueryVariables>(GenderSelectorDocument, options);
      }
export function useGenderSelectorLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GenderSelectorQuery, GenderSelectorQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GenderSelectorQuery, GenderSelectorQueryVariables>(GenderSelectorDocument, options);
        }
export function useGenderSelectorSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GenderSelectorQuery, GenderSelectorQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GenderSelectorQuery, GenderSelectorQueryVariables>(GenderSelectorDocument, options);
        }
export type GenderSelectorQueryHookResult = ReturnType<typeof useGenderSelectorQuery>;
export type GenderSelectorLazyQueryHookResult = ReturnType<typeof useGenderSelectorLazyQuery>;
export type GenderSelectorSuspenseQueryHookResult = ReturnType<typeof useGenderSelectorSuspenseQuery>;
export type GenderSelectorQueryResult = Apollo.QueryResult<GenderSelectorQuery, GenderSelectorQueryVariables>;
export const UpdateProjectPropertyValueDocument = gql`
    mutation UpdateProjectPropertyValue($projectId: ID!, $propertyValueId: ID!) {
  updateProjectPropertyValue(
    input: {projectId: $projectId, propertyValueId: $propertyValueId}
  ) {
    project {
      id
      genderPropertyValue {
        id
      }
    }
  }
}
    `;
export type UpdateProjectPropertyValueMutationFn = Apollo.MutationFunction<UpdateProjectPropertyValueMutation, UpdateProjectPropertyValueMutationVariables>;

/**
 * __useUpdateProjectPropertyValueMutation__
 *
 * To run a mutation, you first call `useUpdateProjectPropertyValueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProjectPropertyValueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProjectPropertyValueMutation, { data, loading, error }] = useUpdateProjectPropertyValueMutation({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      propertyValueId: // value for 'propertyValueId'
 *   },
 * });
 */
export function useUpdateProjectPropertyValueMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProjectPropertyValueMutation, UpdateProjectPropertyValueMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateProjectPropertyValueMutation, UpdateProjectPropertyValueMutationVariables>(UpdateProjectPropertyValueDocument, options);
      }
export type UpdateProjectPropertyValueMutationHookResult = ReturnType<typeof useUpdateProjectPropertyValueMutation>;
export type UpdateProjectPropertyValueMutationResult = Apollo.MutationResult<UpdateProjectPropertyValueMutation>;
export type UpdateProjectPropertyValueMutationOptions = Apollo.BaseMutationOptions<UpdateProjectPropertyValueMutation, UpdateProjectPropertyValueMutationVariables>;
export const ImagesUploadPageDocument = gql`
    query ImagesUploadPage($correctionMode: Boolean!, $projectId: ID!) {
  currentUser {
    id
    project(projectId: $projectId) {
      id
      hasInvalidImages @include(if: $correctionMode)
      hasImageProcessingErrors @include(if: $correctionMode)
      styles {
        nodes {
          id
        }
      }
      inputImages {
        nodes {
          ...inputImageUploadImagePage
        }
      }
    }
  }
}
    ${InputImageUploadImagePageFragmentDoc}`;

/**
 * __useImagesUploadPageQuery__
 *
 * To run a query within a React component, call `useImagesUploadPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useImagesUploadPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImagesUploadPageQuery({
 *   variables: {
 *      correctionMode: // value for 'correctionMode'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useImagesUploadPageQuery(baseOptions: Apollo.QueryHookOptions<ImagesUploadPageQuery, ImagesUploadPageQueryVariables> & ({ variables: ImagesUploadPageQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ImagesUploadPageQuery, ImagesUploadPageQueryVariables>(ImagesUploadPageDocument, options);
      }
export function useImagesUploadPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ImagesUploadPageQuery, ImagesUploadPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ImagesUploadPageQuery, ImagesUploadPageQueryVariables>(ImagesUploadPageDocument, options);
        }
export function useImagesUploadPageSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ImagesUploadPageQuery, ImagesUploadPageQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ImagesUploadPageQuery, ImagesUploadPageQueryVariables>(ImagesUploadPageDocument, options);
        }
export type ImagesUploadPageQueryHookResult = ReturnType<typeof useImagesUploadPageQuery>;
export type ImagesUploadPageLazyQueryHookResult = ReturnType<typeof useImagesUploadPageLazyQuery>;
export type ImagesUploadPageSuspenseQueryHookResult = ReturnType<typeof useImagesUploadPageSuspenseQuery>;
export type ImagesUploadPageQueryResult = Apollo.QueryResult<ImagesUploadPageQuery, ImagesUploadPageQueryVariables>;
export const PackageSelectionPageDocument = gql`
    query PackageSelectionPage {
  availablePackages {
    nodes {
      ...PackageCard
    }
  }
}
    ${PackageCardFragmentDoc}`;

/**
 * __usePackageSelectionPageQuery__
 *
 * To run a query within a React component, call `usePackageSelectionPageQuery` and pass it any options that fit your needs.
 * When your component renders, `usePackageSelectionPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePackageSelectionPageQuery({
 *   variables: {
 *   },
 * });
 */
export function usePackageSelectionPageQuery(baseOptions?: Apollo.QueryHookOptions<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>(PackageSelectionPageDocument, options);
      }
export function usePackageSelectionPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>(PackageSelectionPageDocument, options);
        }
export function usePackageSelectionPageSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>(PackageSelectionPageDocument, options);
        }
export type PackageSelectionPageQueryHookResult = ReturnType<typeof usePackageSelectionPageQuery>;
export type PackageSelectionPageLazyQueryHookResult = ReturnType<typeof usePackageSelectionPageLazyQuery>;
export type PackageSelectionPageSuspenseQueryHookResult = ReturnType<typeof usePackageSelectionPageSuspenseQuery>;
export type PackageSelectionPageQueryResult = Apollo.QueryResult<PackageSelectionPageQuery, PackageSelectionPageQueryVariables>;
export const ProjectsListDocument = gql`
    query ProjectsList {
  currentUser {
    id
    projects {
      nodes {
        ...projectCard
      }
    }
  }
}
    ${ProjectCardFragmentDoc}`;

/**
 * __useProjectsListQuery__
 *
 * To run a query within a React component, call `useProjectsListQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectsListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectsListQuery({
 *   variables: {
 *   },
 * });
 */
export function useProjectsListQuery(baseOptions?: Apollo.QueryHookOptions<ProjectsListQuery, ProjectsListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProjectsListQuery, ProjectsListQueryVariables>(ProjectsListDocument, options);
      }
export function useProjectsListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectsListQuery, ProjectsListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProjectsListQuery, ProjectsListQueryVariables>(ProjectsListDocument, options);
        }
export function useProjectsListSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ProjectsListQuery, ProjectsListQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ProjectsListQuery, ProjectsListQueryVariables>(ProjectsListDocument, options);
        }
export type ProjectsListQueryHookResult = ReturnType<typeof useProjectsListQuery>;
export type ProjectsListLazyQueryHookResult = ReturnType<typeof useProjectsListLazyQuery>;
export type ProjectsListSuspenseQueryHookResult = ReturnType<typeof useProjectsListSuspenseQuery>;
export type ProjectsListQueryResult = Apollo.QueryResult<ProjectsListQuery, ProjectsListQueryVariables>;
export const StylesSelectionPageDocument = gql`
    query StylesSelectionPage($projectId: ID!) {
  availableStyles {
    nodes {
      ...styleStyleSelectionCard
    }
  }
  availableProperties(propertyType: FOR_STYLE) {
    nodes {
      ...propertyStyleSelectionCard
    }
  }
  currentUser {
    id
    project(projectId: $projectId) {
      id
      ...cart
    }
  }
}
    ${StyleStyleSelectionCardFragmentDoc}
${PropertyStyleSelectionCardFragmentDoc}
${CartFragmentDoc}`;

/**
 * __useStylesSelectionPageQuery__
 *
 * To run a query within a React component, call `useStylesSelectionPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useStylesSelectionPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStylesSelectionPageQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useStylesSelectionPageQuery(baseOptions: Apollo.QueryHookOptions<StylesSelectionPageQuery, StylesSelectionPageQueryVariables> & ({ variables: StylesSelectionPageQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<StylesSelectionPageQuery, StylesSelectionPageQueryVariables>(StylesSelectionPageDocument, options);
      }
export function useStylesSelectionPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StylesSelectionPageQuery, StylesSelectionPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<StylesSelectionPageQuery, StylesSelectionPageQueryVariables>(StylesSelectionPageDocument, options);
        }
export function useStylesSelectionPageSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<StylesSelectionPageQuery, StylesSelectionPageQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<StylesSelectionPageQuery, StylesSelectionPageQueryVariables>(StylesSelectionPageDocument, options);
        }
export type StylesSelectionPageQueryHookResult = ReturnType<typeof useStylesSelectionPageQuery>;
export type StylesSelectionPageLazyQueryHookResult = ReturnType<typeof useStylesSelectionPageLazyQuery>;
export type StylesSelectionPageSuspenseQueryHookResult = ReturnType<typeof useStylesSelectionPageSuspenseQuery>;
export type StylesSelectionPageQueryResult = Apollo.QueryResult<StylesSelectionPageQuery, StylesSelectionPageQueryVariables>;
export const WelcomePageCheckSessionDocument = gql`
    query WelcomePageCheckSession {
  currentUser {
    id
    projects {
      nodes {
        id
      }
    }
  }
}
    `;

/**
 * __useWelcomePageCheckSessionQuery__
 *
 * To run a query within a React component, call `useWelcomePageCheckSessionQuery` and pass it any options that fit your needs.
 * When your component renders, `useWelcomePageCheckSessionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWelcomePageCheckSessionQuery({
 *   variables: {
 *   },
 * });
 */
export function useWelcomePageCheckSessionQuery(baseOptions?: Apollo.QueryHookOptions<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>(WelcomePageCheckSessionDocument, options);
      }
export function useWelcomePageCheckSessionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>(WelcomePageCheckSessionDocument, options);
        }
export function useWelcomePageCheckSessionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>(WelcomePageCheckSessionDocument, options);
        }
export type WelcomePageCheckSessionQueryHookResult = ReturnType<typeof useWelcomePageCheckSessionQuery>;
export type WelcomePageCheckSessionLazyQueryHookResult = ReturnType<typeof useWelcomePageCheckSessionLazyQuery>;
export type WelcomePageCheckSessionSuspenseQueryHookResult = ReturnType<typeof useWelcomePageCheckSessionSuspenseQuery>;
export type WelcomePageCheckSessionQueryResult = Apollo.QueryResult<WelcomePageCheckSessionQuery, WelcomePageCheckSessionQueryVariables>;
export const UploadImageDocument = gql`
    mutation UploadImage($projectId: ID!, $image: Upload!, $triggerProcessing: Boolean!) {
  uploadProjectImage(
    input: {projectId: $projectId, image: $image, triggerProcessing: $triggerProcessing}
  ) {
    project {
      id
      ...projectUploadImagePage
    }
  }
}
    ${ProjectUploadImagePageFragmentDoc}`;
export type UploadImageMutationFn = Apollo.MutationFunction<UploadImageMutation, UploadImageMutationVariables>;

/**
 * __useUploadImageMutation__
 *
 * To run a mutation, you first call `useUploadImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadImageMutation, { data, loading, error }] = useUploadImageMutation({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      image: // value for 'image'
 *      triggerProcessing: // value for 'triggerProcessing'
 *   },
 * });
 */
export function useUploadImageMutation(baseOptions?: Apollo.MutationHookOptions<UploadImageMutation, UploadImageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UploadImageMutation, UploadImageMutationVariables>(UploadImageDocument, options);
      }
export type UploadImageMutationHookResult = ReturnType<typeof useUploadImageMutation>;
export type UploadImageMutationResult = Apollo.MutationResult<UploadImageMutation>;
export type UploadImageMutationOptions = Apollo.BaseMutationOptions<UploadImageMutation, UploadImageMutationVariables>;
export const RemoveImageDocument = gql`
    mutation RemoveImage($imageId: ID!) {
  removeProjectImage(input: {imageId: $imageId}) {
    project {
      ...projectUploadImagePage
    }
  }
}
    ${ProjectUploadImagePageFragmentDoc}`;
export type RemoveImageMutationFn = Apollo.MutationFunction<RemoveImageMutation, RemoveImageMutationVariables>;

/**
 * __useRemoveImageMutation__
 *
 * To run a mutation, you first call `useRemoveImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeImageMutation, { data, loading, error }] = useRemoveImageMutation({
 *   variables: {
 *      imageId: // value for 'imageId'
 *   },
 * });
 */
export function useRemoveImageMutation(baseOptions?: Apollo.MutationHookOptions<RemoveImageMutation, RemoveImageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RemoveImageMutation, RemoveImageMutationVariables>(RemoveImageDocument, options);
      }
export type RemoveImageMutationHookResult = ReturnType<typeof useRemoveImageMutation>;
export type RemoveImageMutationResult = Apollo.MutationResult<RemoveImageMutation>;
export type RemoveImageMutationOptions = Apollo.BaseMutationOptions<RemoveImageMutation, RemoveImageMutationVariables>;
export const CheckPurchaseStatusDocument = gql`
    query CheckPurchaseStatus($projectId: ID!) {
  currentUser {
    id
    project(projectId: $projectId) {
      id
      lastOrder {
        id
        processingStatus
      }
    }
  }
}
    `;

/**
 * __useCheckPurchaseStatusQuery__
 *
 * To run a query within a React component, call `useCheckPurchaseStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPurchaseStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPurchaseStatusQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useCheckPurchaseStatusQuery(baseOptions: Apollo.QueryHookOptions<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables> & ({ variables: CheckPurchaseStatusQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables>(CheckPurchaseStatusDocument, options);
      }
export function useCheckPurchaseStatusLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables>(CheckPurchaseStatusDocument, options);
        }
export function useCheckPurchaseStatusSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables>(CheckPurchaseStatusDocument, options);
        }
export type CheckPurchaseStatusQueryHookResult = ReturnType<typeof useCheckPurchaseStatusQuery>;
export type CheckPurchaseStatusLazyQueryHookResult = ReturnType<typeof useCheckPurchaseStatusLazyQuery>;
export type CheckPurchaseStatusSuspenseQueryHookResult = ReturnType<typeof useCheckPurchaseStatusSuspenseQuery>;
export type CheckPurchaseStatusQueryResult = Apollo.QueryResult<CheckPurchaseStatusQuery, CheckPurchaseStatusQueryVariables>;
export const ChoosePackageDocument = gql`
    mutation ChoosePackage($projectId: ID!, $packageId: ID!) {
  choosePackage(input: {projectId: $projectId, packageId: $packageId}) {
    project {
      id
      lastOrder {
        id
        processingStatus
        package {
          id
        }
      }
    }
  }
}
    `;
export type ChoosePackageMutationFn = Apollo.MutationFunction<ChoosePackageMutation, ChoosePackageMutationVariables>;

/**
 * __useChoosePackageMutation__
 *
 * To run a mutation, you first call `useChoosePackageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChoosePackageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [choosePackageMutation, { data, loading, error }] = useChoosePackageMutation({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      packageId: // value for 'packageId'
 *   },
 * });
 */
export function useChoosePackageMutation(baseOptions?: Apollo.MutationHookOptions<ChoosePackageMutation, ChoosePackageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChoosePackageMutation, ChoosePackageMutationVariables>(ChoosePackageDocument, options);
      }
export type ChoosePackageMutationHookResult = ReturnType<typeof useChoosePackageMutation>;
export type ChoosePackageMutationResult = Apollo.MutationResult<ChoosePackageMutation>;
export type ChoosePackageMutationOptions = Apollo.BaseMutationOptions<ChoosePackageMutation, ChoosePackageMutationVariables>;
export const DeleteProjectStyleDocument = gql`
    mutation deleteProjectStyle($projectStyleId: ID!) {
  deleteProjectStyle(input: {projectStyleId: $projectStyleId}) {
    project {
      ...cart
    }
  }
}
    ${CartFragmentDoc}`;
export type DeleteProjectStyleMutationFn = Apollo.MutationFunction<DeleteProjectStyleMutation, DeleteProjectStyleMutationVariables>;

/**
 * __useDeleteProjectStyleMutation__
 *
 * To run a mutation, you first call `useDeleteProjectStyleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteProjectStyleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteProjectStyleMutation, { data, loading, error }] = useDeleteProjectStyleMutation({
 *   variables: {
 *      projectStyleId: // value for 'projectStyleId'
 *   },
 * });
 */
export function useDeleteProjectStyleMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProjectStyleMutation, DeleteProjectStyleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteProjectStyleMutation, DeleteProjectStyleMutationVariables>(DeleteProjectStyleDocument, options);
      }
export type DeleteProjectStyleMutationHookResult = ReturnType<typeof useDeleteProjectStyleMutation>;
export type DeleteProjectStyleMutationResult = Apollo.MutationResult<DeleteProjectStyleMutation>;
export type DeleteProjectStyleMutationOptions = Apollo.BaseMutationOptions<DeleteProjectStyleMutation, DeleteProjectStyleMutationVariables>;
export const AddProjectStyleDocument = gql`
    mutation addProjectStyle($projectId: ID!, $styleId: ID!, $propertyValueIds: [ID!]!) {
  addProjectStyle(
    input: {projectId: $projectId, styleId: $styleId, propertyValueIds: $propertyValueIds}
  ) {
    project {
      id
      ...cart
    }
  }
}
    ${CartFragmentDoc}`;
export type AddProjectStyleMutationFn = Apollo.MutationFunction<AddProjectStyleMutation, AddProjectStyleMutationVariables>;

/**
 * __useAddProjectStyleMutation__
 *
 * To run a mutation, you first call `useAddProjectStyleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddProjectStyleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addProjectStyleMutation, { data, loading, error }] = useAddProjectStyleMutation({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      styleId: // value for 'styleId'
 *      propertyValueIds: // value for 'propertyValueIds'
 *   },
 * });
 */
export function useAddProjectStyleMutation(baseOptions?: Apollo.MutationHookOptions<AddProjectStyleMutation, AddProjectStyleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddProjectStyleMutation, AddProjectStyleMutationVariables>(AddProjectStyleDocument, options);
      }
export type AddProjectStyleMutationHookResult = ReturnType<typeof useAddProjectStyleMutation>;
export type AddProjectStyleMutationResult = Apollo.MutationResult<AddProjectStyleMutation>;
export type AddProjectStyleMutationOptions = Apollo.BaseMutationOptions<AddProjectStyleMutation, AddProjectStyleMutationVariables>;
export const WelcomeScreenSignInWithExternalAccountDocument = gql`
    mutation WelcomeScreenSignInWithExternalAccount($input: SignInWithExternalAccountInput!) {
  signInWithExternalAccount(input: $input) {
    clientMutationId
    userAuthentication {
      jwtToken
    }
  }
}
    `;
export type WelcomeScreenSignInWithExternalAccountMutationFn = Apollo.MutationFunction<WelcomeScreenSignInWithExternalAccountMutation, WelcomeScreenSignInWithExternalAccountMutationVariables>;

/**
 * __useWelcomeScreenSignInWithExternalAccountMutation__
 *
 * To run a mutation, you first call `useWelcomeScreenSignInWithExternalAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWelcomeScreenSignInWithExternalAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [welcomeScreenSignInWithExternalAccountMutation, { data, loading, error }] = useWelcomeScreenSignInWithExternalAccountMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWelcomeScreenSignInWithExternalAccountMutation(baseOptions?: Apollo.MutationHookOptions<WelcomeScreenSignInWithExternalAccountMutation, WelcomeScreenSignInWithExternalAccountMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WelcomeScreenSignInWithExternalAccountMutation, WelcomeScreenSignInWithExternalAccountMutationVariables>(WelcomeScreenSignInWithExternalAccountDocument, options);
      }
export type WelcomeScreenSignInWithExternalAccountMutationHookResult = ReturnType<typeof useWelcomeScreenSignInWithExternalAccountMutation>;
export type WelcomeScreenSignInWithExternalAccountMutationResult = Apollo.MutationResult<WelcomeScreenSignInWithExternalAccountMutation>;
export type WelcomeScreenSignInWithExternalAccountMutationOptions = Apollo.BaseMutationOptions<WelcomeScreenSignInWithExternalAccountMutation, WelcomeScreenSignInWithExternalAccountMutationVariables>;
export const CreateProjectDocument = gql`
    mutation CreateProject {
  createProject(input: {}) {
    project {
      id
    }
  }
}
    `;
export type CreateProjectMutationFn = Apollo.MutationFunction<CreateProjectMutation, CreateProjectMutationVariables>;

/**
 * __useCreateProjectMutation__
 *
 * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({
 *   variables: {
 *   },
 * });
 */
export function useCreateProjectMutation(baseOptions?: Apollo.MutationHookOptions<CreateProjectMutation, CreateProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, options);
      }
export type CreateProjectMutationHookResult = ReturnType<typeof useCreateProjectMutation>;
export type CreateProjectMutationResult = Apollo.MutationResult<CreateProjectMutation>;
export type CreateProjectMutationOptions = Apollo.BaseMutationOptions<CreateProjectMutation, CreateProjectMutationVariables>;